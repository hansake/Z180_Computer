# File test180.z80
0000			; test180.z80 
0000			; 
0000			; Test program for the Z180 computer 
0000			; 
0000			; testing: 
0000			;   - simple MMU setup 
0000			;   - RAM as stack 
0000			;   - Serial output port 0 & 1 
0000			;   - Serial input port 0 & 1 
0000			;   - MMU setup with Common Bank 0, Bank Area, Common Bank 1 
0000			;   - simple RAM test 
0000			;   - copy test program to RAM and execute 
0000			;   - switch to low RAM using MEMSEL 
0000			;   - test 74LS74 select outputs 
0000			;   - test all RAM using MMU and MEMSEL 
0000			;   - set no wait states for RAM access 
0000			;   - interupt test 
0000			; 
0000			; You are free to use, modify, and redistribute 
0000			; this source code. The software is provided "as is", 
0000			; without warranty of any kind. 
0000			; Hastily Cobbled Together 2021 by Hans-Ake Lund. 
0000			; 
0000			 
0000			; Internal ports 
0000			 
0000			; ASCI Registers port 0 and 1 
0000			CNTLA0: equ 0x0000  ;ASCI Channel Control Register A 0 
0000			CNTLA1: equ 0x0001  ;ASCI Channel Control Register A 1 
0000			CNTLB0: equ 0x0002  ;ASCI Control Register B 0 
0000			CNTLB1: equ 0x0003  ;ASCI Control Register B 1 
0000			STAT0:  equ 0x0004  ;ASCI Status Register 0 
0000			STAT1:  equ 0x0005  ;ASCI Status Register 1 
0000			TDR0:   equ 0x0006  ;ASCI Transmit Data Register 0 
0000			TDR1:   equ 0x0007  ;ASCI Transmit Data Register 1 
0000			RDR0:   equ 0x0008  ;ASCI Receive Data FIFO 0 
0000			RDR1:   equ 0x0009  ;ASCI Receive Data FIFO 1 
0000			 
0000			; Timer Registers 
0000			TMDR0L: equ 0x000c  ;Timer Data Register Channel 0L 
0000			TMDR0H: equ 0x000d  ;Timer Data Register Channel 0H 
0000			RLDR0L: equ 0x000e  ;Timer Reload Register 0L 
0000			RLDR0H: equ 0x000f  ;Timer Reload Register 0H 
0000			TCR:    equ 0x0010  ;Timer Control Register 
0000			TMDR1L: equ 0x0014  ;Timer Data Register Channel 1L 
0000			TMDR1H: equ 0x0015  ;Timer Data Register Channel 1H 
0000			RLDR1L: equ 0x0016  ;Timer Reload Register 1L 
0000			RLDR1H: equ 0x0017  ;Timer Reload Register 1H 
0000			 
0000			; DMA/WAIT Control Register 
0000			DCNTL:  equ 0x0032  ;DMA/WAIT Control Register 
0000			 
0000			; Interrupt Control 
0000			IL:     equ 0x0033  ;Interrupt Vector Low Register 
0000			ITC:    equ 0x0034  ;Int/TRAP Control Register 
0000			 
0000			; MMU Registers 
0000			CBR:    equ 0x0038  ;MMU Common Base Register 
0000			BBR:    equ 0x0039  ;MMU Bank Base Register 
0000			CBAR:   equ 0x003a  ;MMU Common/Bank Area Register 
0000			 
0000			; External ports 
0000			 
0000			;Select EPROM or RAM on address 0x0000 - 0x3ffff 
0000			ROMSEL: equ 0x40    ;Write selects EPROM (reset condition) 
0000			RAMSEL: equ 0x41    ;Write selects RAM 
0000			 
0000			;LED on/off 
0000			LEDOFF: equ 0x42    ;Write turns LED off (reset condition) 
0000			LEDON:  equ 0x43    ;Write turns LED on 
0000			 
0000			;SPI device select and AVR reset 
0000			CSPORT: equ 0x44    ;Write to bit 0 - 3 (reset condition, all 0) 
0000			                    ;Bit 0: select SD_CS0 when set to 1 
0000			                    ;Bit 1: select SD_CS1 when set to 1 
0000			                    ;Bit 2: select ATSS (AVR) when set to 1 
0000			                    ;Bit 1: reset AVR when set to 1 
0000			                    ;       if JP8 pin 2-3 connected 
0000			 
0000			 
0000			boot: 
0000			 
0000			init: 
0000			 
0000			; Set up the MMU initially 
0000			; 
0000			; Common Bank 0, 4KB 
0000			;    logical: 0x0000 - 0x0fff 
0000			;    physical: 0x00000 - 0x00fff, EPROM or start of low RAM if enabled 
0000			; Bank Area, 56KB 
0000			;    logical: 0x1000 - 0xefff 
0000			;    physical: 0x41000 - 0x4efff, low RAM chip above EPROM 
0000			; Common Bank 1, 4KB 
0000			;    logical: 0xf000 - 0xffff 
0000			;    physical: 0xff000 - 0xfffff, end of high RAM chip 
0000			; 
0000			; The MMU function is a bit mysterious but I learned that CBAR 
0000			; must be configured before CBR and BBR otherwise strange 
0000			; things will happen. 
0000			 
0000 3e f1		    ld a, 0xf1   ;<CA><BA> 
0002 01 3a 00		    ld bc, CBAR 
0005 ed 79		    out (c), a 
0007 3e f0		    ld a, 0xf0 
0009 01 38 00		    ld bc, CBR 
000c ed 79		    out (c), a 
000e 3e 40		    ld a, 0x40 
0010 01 39 00		    ld bc, BBR 
0013 ed 79		    out (c), a 
0015			 
0015			HIRAM: equ 0xf000 
0015			 
0015			; copy the program to high RAM 
0015 01 52 06		    ld bc,prgend - prgstart 
0018 21 2e 00		    ld hl,prgineprom 
001b 11 00 f0		    ld de,HIRAM 
001e			cploop: 
001e 78			    ld a,b 
001f b1			    or c 
0020 ca 2b 00		    jp z,cpend 
0023 7e			    ld a,(hl) 
0024 23			    inc hl 
0025 12			    ld (de),a 
0026 13			    inc de 
0027 0b			    dec bc 
0028 c3 1e 00		    jp cploop 
002b			cpend: 
002b c3 00 f0		    jp prgstart	; jump to the copied code 
002e			 
002e			prgineprom: 
002e			 
002e			    org HIRAM 
f000			 
f000			prgstart: 
f000			 
f000			; Set up Stack Pointer (first push/call will wrap to 0xffff) 
f000 31 00 00		    ld sp, 0x0000 
f003			 
f003			; When running from RAM configure no memory wait states 
f003 01 32 00		    ld bc, DCNTL 
f006 ed 78		    in a, (c) 
f008 e6 3f		    and 00111111b  ; reset MVI0 and MVI1 
f00a ed 79		    out (c), a 
f00c			 
f00c			; Initialize devices 
f00c			; and blink LED 
f00c			 
f00c 06 01		    ld b, 1         ;1 blink, MMU initialized 
f00e cd e0 f0		    call ledblink 
f011 06 02		    ld b, 2 
f013 cd fd f0		    call delays 
f016			 
f016 cd 6a f0		    call asci0init 
f019 06 02		    ld b, 2         ;2 blinks, ASCI 0 initialized 
f01b cd e0 f0		    call ledblink 
f01e 06 02		    ld b, 2 
f020 cd fd f0		    call delays 
f023			 
f023 cd a5 f0		    call asci1init 
f026 06 03		    ld b, 3         ;3 blinks, ASCI 1 initialized 
f028 cd e0 f0		    call ledblink 
f02b 06 02		    ld b, 2 
f02d cd fd f0		    call delays 
f030			 
f030 3e 00		    ld a, 0         ;set print indicator index 
f032 32 52 f6		    ld (indindex), a 
f035			 
f035 3e 11		    ld a, 00010001b ;set rotating bits for 74LS74 CS output 
f037 32 53 f6		    ld (cspattern), a 
f03a			 
f03a 3e 00		    ld a, 0          ;reset interrupt indicator 
f03c 32 55 f6		    ld (gotint), a 
f03f			 
f03f			; Disable all external interrupts 
f03f 01 34 00		    ld bc, ITC 
f042 3e 00		    ld a, 00000000b 
f044 ed 79		    out (c), a 
f046			 
f046			; Initialize timer 0 
f046 01 0c 00		    ld bc, TMDR0L 
f049 e6 ff		    and 0xff         ; set low timer 0 
f04b ed 79		    out (c), a 
f04d 01 0d 00		    ld bc, TMDR0H 
f050 e6 ef		    and 0xef         ; set high timer 0 
f052 ed 79		    out (c), a 
f054			 
f054 01 10 00		    ld bc, TCR 
f057 3e 11		    ld a, 00010001b  ; bit 4 TIE0 (Timer Interrupt Enable 0) 
f059			                     ; bit 0 TDE0 (Timer Down Count Enable 0) 
f059 ed 79		    out (c), a 
f05b			 
f05b			; Initialize internal interupts and enable 
f05b			intinit: 
f05b 3e f6		    ld a, ivblock / 256 
f05d ed 47		    ld i, a 
f05f 3e 40		    ld a, ivblock & 0x00ff 
f061 01 33 00		    ld bc, IL 
f064 ed 79		    out (c), a 
f066 fb			    ei 
f067			 
f067 c3 3b f1		    jp testloop 
f06a			 
f06a			; ASCI routines 
f06a			 
f06a			; Initialize port 0 
f06a			asci0init: 
f06a 3e 64		    ld a, 01100100b 
f06c			            ; bit 7 = 0: MPE - disabled 
f06c			            ; bit 6 = 1: RE - Rx enabled 
f06c			            ; bit 5 = 1: TE - Tx enabled 
f06c			            ; bit 4 = 0: RTS0 - set to low, RTS active (?) 
f06c			            ; bit 3 = 0: MPBR/EFR - not used 
f06c			            ; bit 2 - 0 = 100 - Start + 8 bit data + 1 stop 
f06c 01 00 00		    ld bc, CNTLA0 
f06f ed 79		    out (c), a 
f071			 
f071			    ; set Baudrate: PHI / (PS * DR * SS) = Baud Rate 
f071			    ; 9216000 Hz / (30 * 16 * 2) = 9600 Baud 
f071 3e 21		    ld a, 00100001b 
f073			            ; bit 7 = 0:  MPBT - disabled 
f073			            ; bit 6 = 0:  MP - disabled 
f073			            ; bit 5 = 1:  CTS/PS - prescale = 30 (PS as SS2-0 are not 111) 
f073			            ; bit 4 = 0:  PEO - ignored as no parity configured 
f073			            ; bit 3 = 0:  DR - Clock factor = 16 
f073			            ; bit 2 - 0 = 001:  SS2-SS0 - Divide Ratio: 2 
f073 01 02 00		    ld bc, CNTLB0 
f076 ed 79		    out (c), a 
f078			 
f078 c9			    ret 
f079			 
f079			; Output a character on port 0 
f079			; reg E contains character to output 
f079			asci0putc: 
f079 01 04 00		    ld bc, STAT0 
f07c ed 78		    in a, (c) 
f07e e6 02		    and 00000010b    ;test bit 1 = TDRE: Transmit Data Register Empty 
f080 28 f7		    jr z, asci0putc  ;not empty yet 
f082 7b			    ld a, e 
f083 01 06 00		    ld bc, TDR0 
f086 ed 79		    out (c), a       ;output character 
f088 c9			    ret 
f089			 
f089			; Input a character from port 0 
f089			; reg E contains the character 
f089			; if E == 0 no character is available 
f089			asci0getc: 
f089 1e 00		    ld e, 0 
f08b 01 04 00		    ld bc, STAT0 
f08e ed 78		    in a, (c) 
f090 e6 80		    and 10000000b    ;test bit 7 = RDRF: Recieve data in FIFO 
f092 c8			    ret z            ;empty 
f093 7b			    ld a, e 
f094 01 08 00		    ld bc, RDR0 
f097 ed 78		    in a, (c)        ;input character 
f099 5f			    ld e, a 
f09a c9			    ret 
f09b			 
f09b			; Output a character string on port 0 
f09b			; reg HL points to string to output 
f09b			; the string is ended by 0 
f09b			asci0pstr: 
f09b 7e			    ld a, (hl) 
f09c b7			    or a 
f09d c8			    ret z 
f09e 5e			    ld e, (hl) 
f09f 23			    inc hl 
f0a0 cd 79 f0		    call asci0putc 
f0a3 18 f6		    jr asci0pstr 
f0a5			 
f0a5			; Initialize port 1 
f0a5			asci1init: 
f0a5 3e 64		    ld a, 01100100b 
f0a7			            ; bit 7 = 0: MPE - disabled 
f0a7			            ; bit 6 = 1: RE - Rx enabled 
f0a7			            ; bit 5 = 1: TE - Tx enabled 
f0a7			            ; bit 4 = 0: RTS0 - set to low, RTS active (?) 
f0a7			            ; bit 3 = 0: MPBR/EFR - not used 
f0a7			            ; bit 2 - 0 = 100 - Start + 8 bit data + 1 stop 
f0a7 01 01 00		    ld bc, CNTLA1 
f0aa ed 79		    out (c), a 
f0ac			 
f0ac			    ; set Baudrate: PHI / (PS * DR * SS) = Baud Rate 
f0ac			    ; 9216000 Hz / (30 * 16 * 2) = 9600 Baud 
f0ac 3e 21		    ld a, 00100001b 
f0ae			            ; bit 7 = 0:  MPBT - disabled 
f0ae			            ; bit 6 = 0:  MP - disabled 
f0ae			            ; bit 5 = 1:  CTS/PS - prescale = 30 (PS as SS2-0 are not 111) 
f0ae			            ; bit 4 = 0:  PEO - ignored as no parity configured 
f0ae			            ; bit 3 = 0:  DR - Clock factor = 16 
f0ae			            ; bit 2 - 0 = 001:  SS2-SS0 - Divide Ratio: 2 
f0ae 01 03 00		    ld bc, CNTLB1 
f0b1 ed 79		    out (c), a 
f0b3			 
f0b3 c9			    ret 
f0b4			 
f0b4			; Output a character on port 1 
f0b4			; reg E contains character to output 
f0b4			asci1putc: 
f0b4 01 05 00		    ld bc, STAT1 
f0b7 ed 78		    in a, (c) 
f0b9 e6 02		    and 00000010b    ;test bit 1 = TDRE: Transmit Data Register Empty 
f0bb 28 f7		    jr z, asci1putc  ;not empty yet 
f0bd 7b			    ld a, e 
f0be 01 07 00		    ld bc, TDR1 
f0c1 ed 79		    out (c), a       ;output character 
f0c3 c9			    ret 
f0c4			 
f0c4			; Input a character from port 1 
f0c4			; reg E contains the character 
f0c4			; if E == 0 no character is available 
f0c4			asci1getc: 
f0c4 1e 00		    ld e, 0 
f0c6 01 05 00		    ld bc, STAT1 
f0c9 ed 78		    in a, (c) 
f0cb e6 80		    and 10000000b    ;test bit 7 = RDRF: Recieve data in FIFO 
f0cd c8			    ret z            ;empty 
f0ce 7b			    ld a, e 
f0cf 01 09 00		    ld bc, RDR1 
f0d2 ed 78		    in a, (c)        ;input character 
f0d4 5f			    ld e, a 
f0d5 c9			    ret 
f0d6			 
f0d6			; Output a character string on port 1 
f0d6			; reg HL points to string to output 
f0d6			; the string is ended by 0 
f0d6			asci1pstr: 
f0d6 7e			    ld a, (hl) 
f0d7 b7			    or a 
f0d8 c8			    ret z 
f0d9 5e			    ld e, (hl) 
f0da 23			    inc hl 
f0db cd b4 f0		    call asci1putc 
f0de 18 f6		    jr asci1pstr 
f0e0			 
f0e0			; ledblink flashes the LED 
f0e0			; number of times in B reg 
f0e0			; using reg: a, b, hl 
f0e0			ledblink: 
f0e0 21 ff ff		    ld hl, 0xffff 
f0e3 3e 01		    ld a, 1 
f0e5 d3 43		    out(LEDON), a 
f0e7			ledonloop: 
f0e7 2b			    dec hl 
f0e8 7c			    ld a, h 
f0e9 b5			    or l 
f0ea c2 e7 f0		    jp nz, ledonloop 
f0ed 21 ff ff		    ld hl, 0xffff 
f0f0 3e 00		    ld a, 0 
f0f2 d3 42		    out(LEDOFF), a 
f0f4			ledoffloop: 
f0f4 2b			    dec hl 
f0f5 7c			    ld a, h 
f0f6 b5			    or l 
f0f7 c2 f4 f0		    jp nz, ledoffloop 
f0fa 10 e4		    djnz ledblink 
f0fc c9			    ret 
f0fd			 
f0fd			; delays makes a delay multiplied 
f0fd			; by number of times in B reg 
f0fd			; using reg: a, b, hl 
f0fd			delays: 
f0fd 21 ff ff		    ld hl, 0xffff 
f100			delay1loop: 
f100 2b			    dec hl 
f101 7c			    ld a, h 
f102 b5			    or l 
f103 c2 00 f1		    jp nz, delay1loop 
f106 21 ff ff		    ld hl, 0xffff 
f109			delay2loop: 
f109 2b			    dec hl 
f10a 7c			    ld a, h 
f10b b5			    or l 
f10c c2 09 f1		    jp nz, delay2loop 
f10f 10 ec		    djnz delays 
f111 c9			    ret 
f112			 
f112			; Test RAM 
f112			; reg bc: number of bytes to test 
f112			; reg hl: start address of test 
f112			; reg a; returns 0 if RAM ok, 1 if error 
f112			ramtest: 
f112 3e 00		    ld a,0		; reset RAM test error flag 
f114 32 54 f6		    ld (ramerr),a 
f117			ramtstlop: 
f117 1e 00		    ld e,0x00 
f119 73			    ld (hl),e 
f11a 7e			    ld a,(hl) 
f11b bb			    cp e 
f11c ca 24 f1		    jp z,ramtstff 
f11f 3e 01		    ld a,1 
f121 32 54 f6		    ld (ramerr),a 
f124			ramtstff: 
f124 1e ff		    ld e,0xff 
f126 73			    ld (hl),e 
f127 7e			    ld a,(hl) 
f128 bb			    cp e 
f129 ca 31 f1		    jp z,ramtstnxt 
f12c 3e 01		    ld a,1 
f12e 32 54 f6		    ld (ramerr),a 
f131			ramtstnxt: 
f131 23			    inc hl 
f132 0b			    dec bc 
f133 78			    ld a,b 
f134 b1			    or c 
f135 20 e0		    jr nz, ramtstlop 
f137 3a 54 f6		    ld a, (ramerr) 
f13a c9			    ret 
f13b			 
f13b			; Main test loop 
f13b			testloop: 
f13b 06 01		    ld b, 1 
f13d cd e0 f0		    call ledblink 
f140 06 01		    ld b, 1 
f142 cd fd f0		    call delays 
f145			 
f145 21 35 f2		    ld hl, asci0txt 
f148 cd 9b f0		    call asci0pstr 
f14b 21 4f f2		    ld hl, indicator 
f14e 06 00		    ld b, 0 
f150 3a 52 f6		    ld a, (indindex) 
f153 4f			    ld c, a 
f154 09			    add hl, bc 
f155 5e			    ld e, (hl) 
f156 cd 79 f0		    call asci0putc 
f159 21 53 f2		    ld hl, built 
f15c cd 9b f0		    call asci0pstr 
f15f cd 89 f0		    call asci0getc 
f162 7b			    ld a, e 
f163 b7			    or a 
f164 ca 70 f1		    jp z, asci0noin 
f167 cd 79 f0		    call asci0putc 
f16a 21 92 f2		    ld hl, inptxt 
f16d cd 9b f0		    call asci0pstr 
f170			asci0noin: 
f170			 
f170 21 42 f2		    ld hl, asci1txt 
f173 cd d6 f0		    call asci1pstr 
f176 21 4f f2		    ld hl, indicator 
f179 06 00		    ld b, 0 
f17b 3a 52 f6		    ld a, (indindex) 
f17e 4f			    ld c, a 
f17f 09			    add hl, bc 
f180 5e			    ld e, (hl) 
f181 cd b4 f0		    call asci1putc 
f184 21 53 f2		    ld hl, built 
f187 cd d6 f0		    call asci1pstr 
f18a cd c4 f0		    call asci1getc 
f18d 7b			    ld a, e 
f18e b7			    or a 
f18f ca 9b f1		    jp z, asci1noin 
f192 cd b4 f0		    call asci1putc 
f195 21 92 f2		    ld hl, inptxt 
f198 cd d6 f0		    call asci1pstr 
f19b			asci1noin: 
f19b			 
f19b			;Indicator index for messages 
f19b 3a 52 f6		    ld a, (indindex) 
f19e 3c			    inc a 
f19f e6 03		    and 00000011b 
f1a1 32 52 f6		    ld (indindex), a 
f1a4			 
f1a4			;Chip Select and reset outputs 
f1a4 3a 53 f6		    ld a, (cspattern) 
f1a7 d3 44		    out (CSPORT), a 
f1a9 07			    rlca 
f1aa 32 53 f6		    ld (cspattern), a 
f1ad			 
f1ad			; Test RAM 
f1ad			 
f1ad			; Enable RAM in low memory 
f1ad 3e 01		    ld a, 1 
f1af d3 41		    out (RAMSEL), a   ; select RAM instead of EPROM from address 0 
f1b1			 
f1b1			; Test physical RAM 
f1b1 dd 21 d8 f2	    ld ix, ramtsttab 
f1b5			ramtloop: 
f1b5 dd 6e 00		    ld l, (ix + 0) 
f1b8 dd 66 01		    ld h, (ix + 1) 
f1bb 7c			    ld a, h 
f1bc b5			    or l 
f1bd 28 47		    jr z, ramtend   ; end of test table 
f1bf dd 7e 02		    ld a, (ix + 2) 
f1c2 01 39 00		    ld bc, BBR 
f1c5 ed 79		    out (c), a 
f1c7			 
f1c7 cd 9b f0		    call asci0pstr 
f1ca dd 6e 00		    ld l, (ix + 0) 
f1cd dd 66 01		    ld h, (ix + 1) 
f1d0 cd d6 f0		    call asci1pstr 
f1d3 dd 6e 03		    ld l, (ix + 3) 
f1d6 dd 66 04		    ld h, (ix + 4) 
f1d9 dd 4e 05		    ld c, (ix + 5) 
f1dc dd 46 06		    ld b, (ix + 6) 
f1df cd 12 f1		    call ramtest 
f1e2 b7			    or a 
f1e3 28 0e		    jr z, ramisok 
f1e5 21 67 f3		    ld hl, ramtxterr 
f1e8 cd 9b f0		    call asci0pstr 
f1eb 21 67 f3		    ld hl, ramtxterr 
f1ee cd d6 f0		    call asci1pstr 
f1f1 18 0c		    jr ramtnxt 
f1f3			ramisok: 
f1f3 21 5f f3		    ld hl, ramtxtok 
f1f6 cd 9b f0		    call asci0pstr 
f1f9 21 5f f3		    ld hl, ramtxtok 
f1fc cd d6 f0		    call asci1pstr 
f1ff			ramtnxt: 
f1ff 01 07 00		    ld bc, 7 
f202 dd 09		    add ix, bc 
f204 18 af		    jr ramtloop 
f206			ramtend: 
f206			 
f206			; Test if interupt recieved and print 
f206 3a 55 f6		    ld a, (gotint)  ; Interupt recieved? 
f209 b7			    or a 
f20a ca 1b f2		    jp z, prtnoint  ; no 
f20d 21 a5 f2		    ld hl, int_msg 
f210 cd 9b f0		    call asci0pstr 
f213 21 a5 f2		    ld hl, int_msg 
f216 cd d6 f0		    call asci1pstr 
f219 18 0c		    jr prtintend 
f21b			prtnoint: 
f21b 21 bd f2		    ld hl, no_int_msg 
f21e cd 9b f0		    call asci0pstr 
f221 21 bd f2		    ld hl, no_int_msg 
f224 cd d6 f0		    call asci1pstr 
f227			prtintend: 
f227			 
f227			; Enable EPROM in low memory 
f227 3e 00		    ld a, 0 
f229 d3 40		    out (ROMSEL), a 
f22b			 
f22b			; Restore Bank Area 
f22b 3e 40		    ld a, 0x40 
f22d 01 39 00		    ld bc, BBR 
f230 ed 79		    out (c), a 
f232			 
f232 c3 3b f1		    jp testloop 
f235			 
f235			asci0txt: 
f235 ..			    db "ASCI port 0 " 
f241 00			    db 0 
f242			asci1txt: 
f242 ..			    db "ASCI port 1 " 
f24e 00			    db 0 
f24f			 
f24f			indicator: 
f24f .. 2f 2d 5c	    db '|', '/', '-', '\\' 
f253			 
f253			built: 
f253 ..			    db " Test program for Z180 computer v1.0" 
f277			    include "tbuilt180.z80" 
f277 ..			    db ", built 2021-08-30 16:17" 
# End of file tbuilt180.z80
f28f .. 0a		    db '\r', '\n' 
f291 00			    db 0 
f292			 
f292			inptxt: 
f292 ..			    db " <- was recieved" 
f2a2 .. 0a		    db '\r', '\n' 
f2a4 00			    db 0 
f2a5			 
f2a5			int_msg: 
f2a5 .. 00		    db "Interupt from timer 0\r\n", 0 
f2bd			no_int_msg: 
f2bd .. 00		    db "No interupt from timer 0\r\n", 0 
f2d8			 
f2d8			; RAM test table 
f2d8			ramtsttab: 
f2d8 72 f3		    dw ramtxt0  ;test message, end of table if NUL 
f2da 00			    db 0x00     ;BBR 
f2db 00 00		    dw 0x0000   ;logical test start address 
f2dd 00 f0		    dw 0xf000   ;size of RAM block to test 
f2df			 
f2df 96 f3		    dw ramtxt1  ;test message 
f2e1 0e			    db 0x0e     ;BBR 
f2e2 00 10		    dw 0x1000   ;logical test start address 
f2e4 00 e0		    dw 0xe000   ;size of RAM block to test 
f2e6			 
f2e6 ba f3		    dw ramtxt2  ;test message 
f2e8 1c			    db 0x1c     ;BBR 
f2e9 00 10		    dw 0x1000   ;logical test start address 
f2eb 00 e0		    dw 0xe000   ;size of RAM block to test 
f2ed			 
f2ed de f3		    dw ramtxt3  ;test message 
f2ef 2a			    db 0x2a     ;BBR 
f2f0 00 10		    dw 0x1000   ;logical test start address 
f2f2 00 e0		    dw 0xe000   ;size of RAM block to test 
f2f4			 
f2f4 02 f4		    dw ramtxt4  ;test message 
f2f6 38			    db 0x38     ;BBR 
f2f7 00 10		    dw 0x1000   ;logical test start address 
f2f9 00 e0		    dw 0xe000   ;size of RAM block to test 
f2fb			 
f2fb 26 f4		    dw ramtxt5  ;test message 
f2fd 46			    db 0x46     ;BBR 
f2fe 00 10		    dw 0x1000   ;logical test start address 
f300 00 e0		    dw 0xe000   ;size of RAM block to test 
f302			 
f302 4a f4		    dw ramtxt6  ;test message 
f304 54			    db 0x54     ;BBR 
f305 00 10		    dw 0x1000   ;logical test start address 
f307 00 e0		    dw 0xe000   ;size of RAM block to test 
f309			 
f309 6e f4		    dw ramtxt7  ;test message 
f30b 62			    db 0x62     ;BBR 
f30c 00 10		    dw 0x1000   ;logical test start address 
f30e 00 e0		    dw 0xe000   ;size of RAM block to test 
f310			 
f310 92 f4		    dw ramtxt8  ;test message 
f312 70			    db 0x70     ;BBR 
f313 00 10		    dw 0x1000   ;logical test start address 
f315 00 e0		    dw 0xe000   ;size of RAM block to test 
f317			 
f317 b6 f4		    dw ramtxt9  ;test message 
f319 7e			    db 0x7e     ;BBR 
f31a 00 10		    dw 0x1000   ;logical test start address 
f31c 00 e0		    dw 0xe000   ;size of RAM block to test 
f31e			 
f31e da f4		    dw ramtxt10 ;test message 
f320 8c			    db 0x8c     ;BBR 
f321 00 10		    dw 0x1000   ;logical test start address 
f323 00 e0		    dw 0xe000   ;size of RAM block to test 
f325			 
f325 fe f4		    dw ramtxt11 ;test message 
f327 9a			    db 0x9a     ;BBR 
f328 00 10		    dw 0x1000   ;logical test start address 
f32a 00 e0		    dw 0xe000   ;size of RAM block to test 
f32c			 
f32c 22 f5		    dw ramtxt12 ;test message 
f32e a8			    db 0xa8     ;BBR 
f32f 00 10		    dw 0x1000   ;logical test start address 
f331 00 e0		    dw 0xe000   ;size of RAM block to test 
f333			 
f333 46 f5		    dw ramtxt13 ;test message 
f335 b6			    db 0xb6     ;BBR 
f336 00 10		    dw 0x1000   ;logical test start address 
f338 00 e0		    dw 0xe000   ;size of RAM block to test 
f33a			 
f33a 6a f5		    dw ramtxt14 ;test message 
f33c c4			    db 0xc4     ;BBR 
f33d 00 10		    dw 0x1000   ;logical test start address 
f33f 00 e0		    dw 0xe000   ;size of RAM block to test 
f341			 
f341 8e f5		    dw ramtxt15 ;test message 
f343 d2			    db 0xd2     ;BBR 
f344 00 10		    dw 0x1000   ;logical test start address 
f346 00 e0		    dw 0xe000   ;size of RAM block to test 
f348			 
f348 b2 f5		    dw ramtxt16 ;test message 
f34a e0			    db 0xe0     ;BBR 
f34b 00 10		    dw 0x1000   ;logical test start address 
f34d 00 e0		    dw 0xe000   ;size of RAM block to test 
f34f			 
f34f d6 f5		    dw ramtxt17 ;test message 
f351 ee			    db 0xee     ;BBR 
f352 00 10		    dw 0x1000   ;logical test start address 
f354 00 e0		    dw 0xe000   ;size of RAM block to test 
f356			 
f356 fa f5		    dw ramtxt18 ;test message 
f358 fc			    db 0xfc     ;BBR 
f359 00 10		    dw 0x1000   ;logical test start address 
f35b 00 20		    dw 0x2000   ;size of RAM block to test 
f35d			 
f35d 00 00		    dw 0        ;end of table 
f35f			 
f35f			ramtxtok: 
f35f ..			    db " - OK" 
f364 .. 0a		    db '\r', '\n' 
f366 00			    db 0 
f367			 
f367			ramtxterr: 
f367 ..			    db " - ERROR" 
f36f .. 0a		    db '\r', '\n' 
f371 00			    db 0 
f372			 
f372			ramtxt0: 
f372 ..			    db "Test physical RAM 0x00000 - 0x0efff" 
f395 00			    db 0 
f396			 
f396			ramtxt1: 
f396 ..			    db "Test physical RAM 0x0f000 - 0x1cfff" 
f3b9 00			    db 0 
f3ba			 
f3ba			ramtxt2: 
f3ba ..			    db "Test physical RAM 0x1d000 - 0x2afff" 
f3dd 00			    db 0 
f3de			 
f3de			ramtxt3: 
f3de ..			    db "Test physical RAM 0x2b000 - 0x38fff" 
f401 00			    db 0 
f402			 
f402			ramtxt4: 
f402 ..			    db "Test physical RAM 0x39000 - 0x46fff" 
f425 00			    db 0 
f426			 
f426			ramtxt5: 
f426 ..			    db "Test physical RAM 0x47000 - 0x54fff" 
f449 00			    db 0 
f44a			 
f44a			ramtxt6: 
f44a ..			    db "Test physical RAM 0x55000 - 0x62fff" 
f46d 00			    db 0 
f46e			 
f46e			ramtxt7: 
f46e ..			    db "Test physical RAM 0x63000 - 0x70fff" 
f491 00			    db 0 
f492			 
f492			ramtxt8: 
f492 ..			    db "Test physical RAM 0x71000 - 0x7efff" 
f4b5 00			    db 0 
f4b6			 
f4b6			ramtxt9: 
f4b6 ..			    db "Test physical RAM 0x7f000 - 0x8cfff" 
f4d9 00			    db 0 
f4da			 
f4da			ramtxt10: 
f4da ..			    db "Test physical RAM 0x8d000 - 0x9afff" 
f4fd 00			    db 0 
f4fe			 
f4fe			ramtxt11: 
f4fe ..			    db "Test physical RAM 0x9b000 - 0xa8fff" 
f521 00			    db 0 
f522			 
f522			ramtxt12: 
f522 ..			    db "Test physical RAM 0xa9000 - 0xb6fff" 
f545 00			    db 0 
f546			 
f546			ramtxt13: 
f546 ..			    db "Test physical RAM 0xb7000 - 0xc4fff" 
f569 00			    db 0 
f56a			 
f56a			ramtxt14: 
f56a ..			    db "Test physical RAM 0xc5000 - 0xd2fff" 
f58d 00			    db 0 
f58e			 
f58e			ramtxt15: 
f58e ..			    db "Test physical RAM 0xd3000 - 0xe0fff" 
f5b1 00			    db 0 
f5b2			 
f5b2			ramtxt16: 
f5b2 ..			    db "Test physical RAM 0xe1000 - 0xeefff" 
f5d5 00			    db 0 
f5d6			 
f5d6			ramtxt17: 
f5d6 ..			    db "Test physical RAM 0xef000 - 0xfcfff" 
f5f9 00			    db 0 
f5fa			 
f5fa			ramtxt18: 
f5fa ..			    db "Test physical RAM 0xfd000 - 0xfefff" 
f61d 00			    db 0 
f61e			 
f61e			; Timer interrupt 
f61e			inttimer: 
f61e f5			    push af 
f61f c5			    push bc 
f620 3e 01		    ld a, 1 
f622 32 55 f6		    ld (gotint), a 
f625 01 10 00		    ld bc, TCR 
f628 ed 78		    in a, (c) 
f62a 01 0c 00		    ld bc, TMDR0L 
f62d ed 78		    in a, (c) 
f62f 01 0d 00		    ld bc, TMDR0H 
f632 ed 78		    in a, (c) 
f634 c1			    pop bc 
f635 f1			    pop af 
f636 fb			    ei 
f637 ed 4d		    reti 
f639			 
f639			; Interrupt routines, dummy for unused devices 
f639			intdummy: 
f639 fb			    ei 
f63a ed 4d		    reti 
f63c			 
f63c			; Interupt vectors for internal devices 
f63c			; make sure that the block is on an even 32 byte address 
f63c			ivstart: 
f63c			if ivstart & 0x001f 
f63c 0x00...		    ds 32 - (ivstart & 0x001f), 0x00 
f640			endif 
f640			 
f640			ivblock: 
f640 39 f6		ivint1:    dw intdummy 
f642 39 f6		ivint2:    dw intdummy 
f644 1e f6		ivprt0:    dw inttimer 
f646 39 f6		ivprt1:    dw intdummy 
f648 39 f6		ivdma0:    dw intdummy 
f64a 39 f6		ivdma1:    dw intdummy 
f64c 39 f6		ivcsio:    dw intdummy 
f64e 39 f6		ivasci0:   dw intdummy 
f650 39 f6		ivasci1:   dw intdummy 
f652			 
f652			prgend:      ;end address for copied code and constants from EPROM to RAM 
f652			 
f652			; The rest of RAM is for variables and stack 
f652			 
f652			indindex:    ;indicator index for printout 
f652 00			    db 0 
f653			 
f653			cspattern:   ;rotating bits for 74LS74 CS output 
f653 00			    db 0 
f654			 
f654			ramerr:      ;RAM test error flag 
f654 00			    db 0 
f655			 
f655			gotint:      ;interrupt indicator 
f655 00			    db 0 
f656			 
# End of file test180.z80
f656
